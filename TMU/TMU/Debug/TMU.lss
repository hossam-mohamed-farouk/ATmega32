
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000380  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  000003f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba8  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000724  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000530  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f1  00000000  00000000  0000229d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000278e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 37       	cpi	r26, 0x75	; 117
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  74:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <led_toggle_A>:
#include "TMU.h"
#define  F_CPU 1000000UL

void led_toggle_A(void)
{
	PORTA^=0xff;
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	80 95       	com	r24
  80:	8b bb       	out	0x1b, r24	; 27
  82:	08 95       	ret

00000084 <led_toggle_B>:
}

void led_toggle_B(void)
{
	PORTB^=0xff;
  84:	88 b3       	in	r24, 0x18	; 24
  86:	80 95       	com	r24
  88:	88 bb       	out	0x18, r24	; 24
  8a:	08 95       	ret

0000008c <led_toggle_C>:
}

void led_toggle_C(void)
{
	PORTC^=0xff;
  8c:	85 b3       	in	r24, 0x15	; 21
  8e:	80 95       	com	r24
  90:	85 bb       	out	0x15, r24	; 21
  92:	08 95       	ret

00000094 <led_toggle_D>:
}

void led_toggle_D(void)
{
	PORTD^=0xff;	
  94:	82 b3       	in	r24, 0x12	; 18
  96:	80 95       	com	r24
  98:	82 bb       	out	0x12, r24	; 18
  9a:	08 95       	ret

0000009c <main>:
}

int main(void)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	e0 97       	sbiw	r28, 0x30	; 48
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
	timer_obj t_1,t_2,t_3,t_4;
	DDRA=0xff;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
  b4:	87 bb       	out	0x17, r24	; 23
	DDRC=0xff;
  b6:	84 bb       	out	0x14, r24	; 20
	DDRD=0xff;
  b8:	81 bb       	out	0x11, r24	; 17

	tmu_init(_1MS);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <tmu_init>
	start_timer(&t_1,250,PERIODIC,led_toggle_A);
  c0:	0e e3       	ldi	r16, 0x3E	; 62
  c2:	10 e0       	ldi	r17, 0x00	; 0
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	4a ef       	ldi	r20, 0xFA	; 250
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 0a 01 	call	0x214	; 0x214 <start_timer>
    start_timer(&t_2,500,PERIODIC,led_toggle_B);
  d6:	02 e4       	ldi	r16, 0x42	; 66
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	44 ef       	ldi	r20, 0xF4	; 244
  de:	51 e0       	ldi	r21, 0x01	; 1
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	ce 01       	movw	r24, r28
  e6:	0d 96       	adiw	r24, 0x0d	; 13
  e8:	0e 94 0a 01 	call	0x214	; 0x214 <start_timer>
	start_timer(&t_3,2030,PERIODIC,led_toggle_C);		//At _1MS 2050 ~= 1_Second
  ec:	06 e4       	ldi	r16, 0x46	; 70
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	4e ee       	ldi	r20, 0xEE	; 238
  f4:	57 e0       	ldi	r21, 0x07	; 7
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	ce 01       	movw	r24, r28
  fc:	49 96       	adiw	r24, 0x19	; 25
  fe:	0e 94 0a 01 	call	0x214	; 0x214 <start_timer>
	start_timer(&t_4,126000,PERIODIC,led_toggle_D);  
 102:	0a e4       	ldi	r16, 0x4A	; 74
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	40 e3       	ldi	r20, 0x30	; 48
 10a:	5c ee       	ldi	r21, 0xEC	; 236
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	ce 01       	movw	r24, r28
 112:	85 96       	adiw	r24, 0x25	; 37
 114:	0e 94 0a 01 	call	0x214	; 0x214 <start_timer>
	
	/* Replace with your application code */
	while (1) 
    {
		tmu_dispatch();
 118:	0e 94 64 01 	call	0x2c8	; 0x2c8 <tmu_dispatch>
 11c:	fd cf       	rjmp	.-6      	; 0x118 <main+0x7c>

0000011e <__vector_11>:
static timer_obj* timers_adresses_buffer[MAX_NO_OF_TIMERS]; 
static ecore_u8 index_counter=0;


ISR(TIMER0_OVF_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	1f 92       	push	r1
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	 
	for (volatile ecore_u8 i=0;i<index_counter;i++)
 140:	19 82       	std	Y+1, r1	; 0x01
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 148:	82 17       	cp	r24, r18
 14a:	20 f5       	brcc	.+72     	; 0x194 <__vector_11+0x76>
	{
		if (timers_adresses_buffer[i] != NULL)
 14c:	e9 81       	ldd	r30, Y+1	; 0x01
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	ef 59       	subi	r30, 0x9F	; 159
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	91 81       	ldd	r25, Z+1	; 0x01
 15c:	89 2b       	or	r24, r25
 15e:	a1 f0       	breq	.+40     	; 0x188 <__vector_11+0x6a>
		{
			(timers_adresses_buffer[i]->remining_time) --;
 160:	e9 81       	ldd	r30, Y+1	; 0x01
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	ef 59       	subi	r30, 0x9F	; 159
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	01 90       	ld	r0, Z+
 16e:	f0 81       	ld	r31, Z
 170:	e0 2d       	mov	r30, r0
 172:	80 85       	ldd	r24, Z+8	; 0x08
 174:	91 85       	ldd	r25, Z+9	; 0x09
 176:	a2 85       	ldd	r26, Z+10	; 0x0a
 178:	b3 85       	ldd	r27, Z+11	; 0x0b
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	a1 09       	sbc	r26, r1
 17e:	b1 09       	sbc	r27, r1
 180:	80 87       	std	Z+8, r24	; 0x08
 182:	91 87       	std	Z+9, r25	; 0x09
 184:	a2 87       	std	Z+10, r26	; 0x0a
 186:	b3 87       	std	Z+11, r27	; 0x0b


ISR(TIMER0_OVF_vect)
{
	 
	for (volatile ecore_u8 i=0;i<index_counter;i++)
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	82 17       	cp	r24, r18
 192:	e0 f2       	brcs	.-72     	; 0x14c <__vector_11+0x2e>
		if (timers_adresses_buffer[i] != NULL)
		{
			(timers_adresses_buffer[i]->remining_time) --;
		}
	}
	TCNT0=0;
 194:	12 be       	out	0x32, r1	; 50
}
 196:	0f 90       	pop	r0
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <tmu_init>:

bool_t tmu_init(timer_resolution tmu_resoltion)
{
 1b4:	e1 e6       	ldi	r30, 0x61	; 97
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	25 e7       	ldi	r18, 0x75	; 117
 1ba:	30 e0       	ldi	r19, 0x00	; 0
	bool_t b_ret_val = E_TRUE;
	for(ecore_u8 i = 0; i < MAX_NO_OF_TIMERS; i++)
	{
		timers_adresses_buffer[i] = NULL;
 1bc:	11 92       	st	Z+, r1
 1be:	11 92       	st	Z+, r1
}

bool_t tmu_init(timer_resolution tmu_resoltion)
{
	bool_t b_ret_val = E_TRUE;
	for(ecore_u8 i = 0; i < MAX_NO_OF_TIMERS; i++)
 1c0:	e2 17       	cp	r30, r18
 1c2:	f3 07       	cpc	r31, r19
 1c4:	d9 f7       	brne	.-10     	; 0x1bc <tmu_init+0x8>
	{
		timers_adresses_buffer[i] = NULL;
	}
	(*(volatile ecore_u8*)(0x53)) = 0;//TCCR0 = 0;
 1c6:	13 be       	out	0x33, r1	; 51
	(*(volatile ecore_u8*)(0x52)) = 0; //TCNT0 = 0
 1c8:	12 be       	out	0x32, r1	; 50
	(*(volatile ecore_u8*)(0x5F)) |= (1<<7);    //En global interrupt (SREG pin I)
 1ca:	9f b7       	in	r25, 0x3f	; 63
 1cc:	90 68       	ori	r25, 0x80	; 128
 1ce:	9f bf       	out	0x3f, r25	; 63
	(*(volatile ecore_u8*)(0x59)) |= (1<<0); //TIMSK |= (1<<0);
 1d0:	99 b7       	in	r25, 0x39	; 57
 1d2:	91 60       	ori	r25, 0x01	; 1
 1d4:	99 bf       	out	0x39, r25	; 57
	
	if (tmu_resoltion == _1MS)
 1d6:	81 11       	cpse	r24, r1
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <tmu_init+0x2c>
	{
		(*(volatile ecore_u8*)(0x53)) = 0x01;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	83 bf       	out	0x33, r24	; 51
 1de:	08 95       	ret
	} 
	else if (tmu_resoltion == _8MS)
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	21 f4       	brne	.+8      	; 0x1ec <tmu_init+0x38>
	{
		(*(volatile ecore_u8*)(0x53)) = 0x02;
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
}

bool_t tmu_init(timer_resolution tmu_resoltion)
{
	bool_t b_ret_val = E_TRUE;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	08 95       	ret
	} 
	else if (tmu_resoltion == _8MS)
	{
		(*(volatile ecore_u8*)(0x53)) = 0x02;
	}
	else if (tmu_resoltion == _64MS)
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <tmu_init+0x44>
	{
		(*(volatile ecore_u8*)(0x53)) = 0x03;
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
}

bool_t tmu_init(timer_resolution tmu_resoltion)
{
	bool_t b_ret_val = E_TRUE;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	08 95       	ret
	}
	else if (tmu_resoltion == _64MS)
	{
		(*(volatile ecore_u8*)(0x53)) = 0x03;
	}
	else if (tmu_resoltion == _256MS)
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	21 f4       	brne	.+8      	; 0x204 <tmu_init+0x50>
	{
		(*(volatile ecore_u8*)(0x53)) = 0x04;
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
}

bool_t tmu_init(timer_resolution tmu_resoltion)
{
	bool_t b_ret_val = E_TRUE;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	08 95       	ret
	}
	else if (tmu_resoltion == _256MS)
	{
		(*(volatile ecore_u8*)(0x53)) = 0x04;
	}
	else if (tmu_resoltion == _1024MS)
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	21 f4       	brne	.+8      	; 0x210 <tmu_init+0x5c>
	{
		(*(volatile ecore_u8*)(0x53)) = 0x05;
 208:	85 e0       	ldi	r24, 0x05	; 5
 20a:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
}

bool_t tmu_init(timer_resolution tmu_resoltion)
{
	bool_t b_ret_val = E_TRUE;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	08 95       	ret
	{
		(*(volatile ecore_u8*)(0x53)) = 0x05;
	}
	else
	{
		b_ret_val = E_FALSE;
 210:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return b_ret_val;
}
 212:	08 95       	ret

00000214 <start_timer>:

bool_t start_timer(timer_obj* t_obj,ecore_u32 time,timer_type t_type,void(*cb_func)(void))
{
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
	bool_t b_ret_val = E_TRUE;
	if ((t_obj != NULL) && (cb_func != NULL))
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	01 f1       	breq	.+64     	; 0x25c <start_timer+0x48>
 21c:	01 15       	cp	r16, r1
 21e:	11 05       	cpc	r17, r1
 220:	f9 f0       	breq	.+62     	; 0x260 <start_timer+0x4c>
	{
		if ((t_type == PERIODIC) || (t_type == ONE_SHOT))
 222:	22 30       	cpi	r18, 0x02	; 2
 224:	f8 f4       	brcc	.+62     	; 0x264 <start_timer+0x50>
		{
			t_obj->o_t_type = t_type;
 226:	fc 01       	movw	r30, r24
 228:	23 83       	std	Z+3, r18	; 0x03
			t_obj->o_cb_func = cb_func;
 22a:	12 83       	std	Z+2, r17	; 0x02
 22c:	01 83       	std	Z+1, r16	; 0x01
			t_obj->o_time = time;
 22e:	44 83       	std	Z+4, r20	; 0x04
 230:	55 83       	std	Z+5, r21	; 0x05
 232:	66 83       	std	Z+6, r22	; 0x06
 234:	77 83       	std	Z+7, r23	; 0x07
			t_obj->remining_time = time;
 236:	40 87       	std	Z+8, r20	; 0x08
 238:	51 87       	std	Z+9, r21	; 0x09
 23a:	62 87       	std	Z+10, r22	; 0x0a
 23c:	73 87       	std	Z+11, r23	; 0x0b
			timers_adresses_buffer[index_counter]=t_obj;
 23e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 242:	e2 2f       	mov	r30, r18
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	ef 59       	subi	r30, 0x9F	; 159
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	91 83       	std	Z+1, r25	; 0x01
 250:	80 83       	st	Z, r24
			index_counter ++;
 252:	2f 5f       	subi	r18, 0xFF	; 255
 254:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
	return b_ret_val;
}

bool_t start_timer(timer_obj* t_obj,ecore_u32 time,timer_type t_type,void(*cb_func)(void))
{
	bool_t b_ret_val = E_TRUE;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	05 c0       	rjmp	.+10     	; 0x266 <start_timer+0x52>
			b_ret_val = E_FALSE;
		}
	} 
	else
	{
		b_ret_val = E_FALSE;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	03 c0       	rjmp	.+6      	; 0x266 <start_timer+0x52>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	01 c0       	rjmp	.+2      	; 0x266 <start_timer+0x52>
			timers_adresses_buffer[index_counter]=t_obj;
			index_counter ++;
		} 
		else
		{
			b_ret_val = E_FALSE;
 264:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		b_ret_val = E_FALSE;
	}
	return b_ret_val;
}
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <stop_timer>:

bool_t stop_timer(timer_obj* t_obj)
{
	bool_t b_ret_val = E_TRUE;	 
	if (t_obj != NULL)
 26c:	00 97       	sbiw	r24, 0x00	; 0
 26e:	41 f1       	breq	.+80     	; 0x2c0 <stop_timer+0x54>
	{
		for (ecore_u8 i=0;i<index_counter;i++)
 270:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 274:	aa 23       	and	r26, r26
 276:	31 f1       	breq	.+76     	; 0x2c4 <stop_timer+0x58>
		{
			if (timers_adresses_buffer[i] == t_obj)
 278:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <timers_adresses_buffer>
 27c:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <timers_adresses_buffer+0x1>
 280:	82 17       	cp	r24, r18
 282:	93 07       	cpc	r25, r19
 284:	a9 f4       	brne	.+42     	; 0x2b0 <stop_timer+0x44>
 286:	09 c0       	rjmp	.+18     	; 0x29a <stop_timer+0x2e>
 288:	b9 01       	movw	r22, r18
 28a:	41 91       	ld	r20, Z+
 28c:	51 91       	ld	r21, Z+
 28e:	2f 5f       	subi	r18, 0xFF	; 255
 290:	3f 4f       	sbci	r19, 0xFF	; 255
 292:	84 17       	cp	r24, r20
 294:	95 07       	cpc	r25, r21
 296:	81 f4       	brne	.+32     	; 0x2b8 <stop_timer+0x4c>
 298:	02 c0       	rjmp	.+4      	; 0x29e <stop_timer+0x32>
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	70 e0       	ldi	r23, 0x00	; 0
			{
				timers_adresses_buffer[i] =NULL;
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	fb 01       	movw	r30, r22
 2a4:	ef 59       	subi	r30, 0x9F	; 159
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	11 82       	std	Z+1, r1	; 0x01
 2aa:	10 82       	st	Z, r1
	return b_ret_val;
}

bool_t stop_timer(timer_obj* t_obj)
{
	bool_t b_ret_val = E_TRUE;	 
 2ac:	81 e0       	ldi	r24, 0x01	; 1
		for (ecore_u8 i=0;i<index_counter;i++)
		{
			if (timers_adresses_buffer[i] == t_obj)
			{
				timers_adresses_buffer[i] =NULL;
				break;
 2ae:	08 95       	ret
 2b0:	e3 e6       	ldi	r30, 0x63	; 99
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
	bool_t b_ret_val = E_TRUE;	 
	if (t_obj != NULL)
	{
		for (ecore_u8 i=0;i<index_counter;i++)
		{
			if (timers_adresses_buffer[i] == t_obj)
 2b4:	21 e0       	ldi	r18, 0x01	; 1
 2b6:	30 e0       	ldi	r19, 0x00	; 0
bool_t stop_timer(timer_obj* t_obj)
{
	bool_t b_ret_val = E_TRUE;	 
	if (t_obj != NULL)
	{
		for (ecore_u8 i=0;i<index_counter;i++)
 2b8:	2a 17       	cp	r18, r26
 2ba:	30 f3       	brcs	.-52     	; 0x288 <stop_timer+0x1c>
	return b_ret_val;
}

bool_t stop_timer(timer_obj* t_obj)
{
	bool_t b_ret_val = E_TRUE;	 
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	08 95       	ret
			}
		}
	} 
	else
	{
		b_ret_val = E_FALSE;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
	return b_ret_val;
}

bool_t stop_timer(timer_obj* t_obj)
{
	bool_t b_ret_val = E_TRUE;	 
 2c4:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		b_ret_val = E_FALSE;
	}
	return b_ret_val;
}
 2c6:	08 95       	ret

000002c8 <tmu_dispatch>:

bool_t tmu_dispatch(void)
{
 2c8:	ff 92       	push	r15
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
	bool_t b_ret_val=E_TRUE;
	for (ecore_u8 i=0;i<index_counter;i++)
 2d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d6:	88 23       	and	r24, r24
 2d8:	09 f4       	brne	.+2      	; 0x2dc <tmu_dispatch+0x14>
 2da:	48 c0       	rjmp	.+144    	; 0x36c <tmu_dispatch+0xa4>
 2dc:	c0 e0       	ldi	r28, 0x00	; 0
 2de:	d1 e0       	ldi	r29, 0x01	; 1
					timers_adresses_buffer[i]->o_cb_func();
					stop_timer(timers_adresses_buffer[i]);
				}
				else
				{
					b_ret_val = E_FALSE;
 2e0:	f1 2c       	mov	r15, r1
bool_t tmu_dispatch(void)
{
	bool_t b_ret_val=E_TRUE;
	for (ecore_u8 i=0;i<index_counter;i++)
	{
		if (timers_adresses_buffer[i] != NULL)
 2e2:	0c 2f       	mov	r16, r28
 2e4:	10 e0       	ldi	r17, 0x00	; 0
 2e6:	f8 01       	movw	r30, r16
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	ef 59       	subi	r30, 0x9F	; 159
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	01 90       	ld	r0, Z+
 2f2:	f0 81       	ld	r31, Z
 2f4:	e0 2d       	mov	r30, r0
 2f6:	30 97       	sbiw	r30, 0x00	; 0
 2f8:	91 f1       	breq	.+100    	; 0x35e <tmu_dispatch+0x96>
		{
			if ((timers_adresses_buffer[i]->remining_time) <= 0)
 2fa:	80 85       	ldd	r24, Z+8	; 0x08
 2fc:	91 85       	ldd	r25, Z+9	; 0x09
 2fe:	a2 85       	ldd	r26, Z+10	; 0x0a
 300:	b3 85       	ldd	r27, Z+11	; 0x0b
 302:	18 16       	cp	r1, r24
 304:	19 06       	cpc	r1, r25
 306:	1a 06       	cpc	r1, r26
 308:	1b 06       	cpc	r1, r27
 30a:	4c f1       	brlt	.+82     	; 0x35e <tmu_dispatch+0x96>
			{
				if (timers_adresses_buffer[i]->o_t_type == PERIODIC)
 30c:	83 81       	ldd	r24, Z+3	; 0x03
 30e:	81 11       	cpse	r24, r1
 310:	15 c0       	rjmp	.+42     	; 0x33c <tmu_dispatch+0x74>
				{
					timers_adresses_buffer[i]->o_cb_func();
 312:	01 80       	ldd	r0, Z+1	; 0x01
 314:	f2 81       	ldd	r31, Z+2	; 0x02
 316:	e0 2d       	mov	r30, r0
 318:	09 95       	icall
					timers_adresses_buffer[i]->remining_time=timers_adresses_buffer[i]->o_time;
 31a:	00 0f       	add	r16, r16
 31c:	11 1f       	adc	r17, r17
 31e:	f8 01       	movw	r30, r16
 320:	ef 59       	subi	r30, 0x9F	; 159
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	01 90       	ld	r0, Z+
 326:	f0 81       	ld	r31, Z
 328:	e0 2d       	mov	r30, r0
 32a:	84 81       	ldd	r24, Z+4	; 0x04
 32c:	95 81       	ldd	r25, Z+5	; 0x05
 32e:	a6 81       	ldd	r26, Z+6	; 0x06
 330:	b7 81       	ldd	r27, Z+7	; 0x07
 332:	80 87       	std	Z+8, r24	; 0x08
 334:	91 87       	std	Z+9, r25	; 0x09
 336:	a2 87       	std	Z+10, r26	; 0x0a
 338:	b3 87       	std	Z+11, r27	; 0x0b
 33a:	11 c0       	rjmp	.+34     	; 0x35e <tmu_dispatch+0x96>
				}
				else if (timers_adresses_buffer[i]->o_t_type == ONE_SHOT)
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	71 f4       	brne	.+28     	; 0x35c <tmu_dispatch+0x94>
				{
					timers_adresses_buffer[i]->o_cb_func();
 340:	01 80       	ldd	r0, Z+1	; 0x01
 342:	f2 81       	ldd	r31, Z+2	; 0x02
 344:	e0 2d       	mov	r30, r0
 346:	09 95       	icall
					stop_timer(timers_adresses_buffer[i]);
 348:	00 0f       	add	r16, r16
 34a:	11 1f       	adc	r17, r17
 34c:	f8 01       	movw	r30, r16
 34e:	ef 59       	subi	r30, 0x9F	; 159
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	80 81       	ld	r24, Z
 354:	91 81       	ldd	r25, Z+1	; 0x01
 356:	0e 94 36 01 	call	0x26c	; 0x26c <stop_timer>
 35a:	01 c0       	rjmp	.+2      	; 0x35e <tmu_dispatch+0x96>
				}
				else
				{
					b_ret_val = E_FALSE;
 35c:	df 2d       	mov	r29, r15
}

bool_t tmu_dispatch(void)
{
	bool_t b_ret_val=E_TRUE;
	for (ecore_u8 i=0;i<index_counter;i++)
 35e:	cf 5f       	subi	r28, 0xFF	; 255
 360:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 364:	c8 17       	cp	r28, r24
 366:	08 f4       	brcc	.+2      	; 0x36a <tmu_dispatch+0xa2>
 368:	bc cf       	rjmp	.-136    	; 0x2e2 <tmu_dispatch+0x1a>
 36a:	01 c0       	rjmp	.+2      	; 0x36e <tmu_dispatch+0xa6>
	return b_ret_val;
}

bool_t tmu_dispatch(void)
{
	bool_t b_ret_val=E_TRUE;
 36c:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
			
	}
	return b_ret_val;
}
 36e:	8d 2f       	mov	r24, r29
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	08 95       	ret

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
