
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000262  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cac  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000627  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000609  00000000  00000000  0000167f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f1  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000498  00000000  00000000  00002161  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000025f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  64:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <port_direction>:
	else
	{
		b_ret_val = E_FALSE; //Unknown port base
	}
	return b_ret_val;
}
  6c:	89 33       	cpi	r24, 0x39	; 57
  6e:	31 f0       	breq	.+12     	; 0x7c <port_direction+0x10>
  70:	86 33       	cpi	r24, 0x36	; 54
  72:	21 f0       	breq	.+8      	; 0x7c <port_direction+0x10>
  74:	83 33       	cpi	r24, 0x33	; 51
  76:	11 f0       	breq	.+4      	; 0x7c <port_direction+0x10>
  78:	80 33       	cpi	r24, 0x30	; 48
  7a:	89 f4       	brne	.+34     	; 0x9e <port_direction+0x32>
  7c:	61 11       	cpse	r22, r1
  7e:	06 c0       	rjmp	.+12     	; 0x8c <port_direction+0x20>
  80:	e8 2f       	mov	r30, r24
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	81 81       	ldd	r24, Z+1	; 0x01
  86:	11 82       	std	Z+1, r1	; 0x01
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	08 95       	ret
  8c:	61 30       	cpi	r22, 0x01	; 1
  8e:	49 f4       	brne	.+18     	; 0xa2 <port_direction+0x36>
  90:	e8 2f       	mov	r30, r24
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	81 81       	ldd	r24, Z+1	; 0x01
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	81 83       	std	Z+1, r24	; 0x01
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	08 95       	ret
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	08 95       	ret
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret

000000a6 <pin_write>:

bool_t pin_write(port_base base,pin_no pin_no,ecore_u8 value)
{
	bool_t b_ret_val = E_TRUE;
	if((base==A)||(base==B)||(base==C)||(base==D))
  a6:	89 33       	cpi	r24, 0x39	; 57
  a8:	31 f0       	breq	.+12     	; 0xb6 <pin_write+0x10>
  aa:	86 33       	cpi	r24, 0x36	; 54
  ac:	21 f0       	breq	.+8      	; 0xb6 <pin_write+0x10>
  ae:	83 33       	cpi	r24, 0x33	; 51
  b0:	11 f0       	breq	.+4      	; 0xb6 <pin_write+0x10>
  b2:	80 33       	cpi	r24, 0x30	; 48
  b4:	09 f5       	brne	.+66     	; 0xf8 <pin_write+0x52>
	{
		if((pin_no>=PIN_0)&&(pin_no<=PIN_7))
  b6:	68 30       	cpi	r22, 0x08	; 8
  b8:	08 f5       	brcc	.+66     	; 0xfc <pin_write+0x56>
		{
			if(value==0)
  ba:	41 11       	cpse	r20, r1
  bc:	0f c0       	rjmp	.+30     	; 0xdc <pin_write+0x36>
			{
				(*(volatile ecore_u8*)(base+OUTPUT_OFFSET))&=(~(1<<pin_no));
  be:	e8 2f       	mov	r30, r24
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	22 81       	ldd	r18, Z+2	; 0x02
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <pin_write+0x28>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <pin_write+0x24>
  d2:	80 95       	com	r24
  d4:	82 23       	and	r24, r18
  d6:	82 83       	std	Z+2, r24	; 0x02
	return b_ret_val;
}

bool_t pin_write(port_base base,pin_no pin_no,ecore_u8 value)
{
	bool_t b_ret_val = E_TRUE;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
			{
				(*(volatile ecore_u8*)(base+OUTPUT_OFFSET))&=(~(1<<pin_no));
			}
			else
			{
				(*(volatile ecore_u8*)(base+OUTPUT_OFFSET)|=(1<<pin_no));
  dc:	e8 2f       	mov	r30, r24
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	22 81       	ldd	r18, Z+2	; 0x02
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <pin_write+0x46>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <pin_write+0x42>
  f0:	82 2b       	or	r24, r18
  f2:	82 83       	std	Z+2, r24	; 0x02
	return b_ret_val;
}

bool_t pin_write(port_base base,pin_no pin_no,ecore_u8 value)
{
	bool_t b_ret_val = E_TRUE;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	08 95       	ret
			b_ret_val = E_FALSE; //Unknown pin number
		}
	}
	else
	{
		b_ret_val = E_FALSE; //Unknown port base
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	08 95       	ret
				(*(volatile ecore_u8*)(base+OUTPUT_OFFSET)|=(1<<pin_no));
			}
		}
		else
		{
			b_ret_val = E_FALSE; //Unknown pin number
  fc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		b_ret_val = E_FALSE; //Unknown port base
	}
	return b_ret_val;
}
  fe:	08 95       	ret

00000100 <pin_read>:

bool_t pin_read(port_base base,pin_no pin_no,ecore_u8* r_value)
{
	bool_t b_ret_val = E_TRUE;
	if((base==A)||(base==B)||(base==C)||(base==D))
 100:	89 33       	cpi	r24, 0x39	; 57
 102:	31 f0       	breq	.+12     	; 0x110 <pin_read+0x10>
 104:	86 33       	cpi	r24, 0x36	; 54
 106:	21 f0       	breq	.+8      	; 0x110 <pin_read+0x10>
 108:	83 33       	cpi	r24, 0x33	; 51
 10a:	11 f0       	breq	.+4      	; 0x110 <pin_read+0x10>
 10c:	80 33       	cpi	r24, 0x30	; 48
 10e:	89 f4       	brne	.+34     	; 0x132 <pin_read+0x32>
	{
		if((pin_no>=PIN_0)&&(pin_no<=PIN_7))
 110:	68 30       	cpi	r22, 0x08	; 8
 112:	88 f4       	brcc	.+34     	; 0x136 <pin_read+0x36>
		{
			*r_value=(*(volatile ecore_u8*)(base)) & (1<<pin_no);
 114:	e8 2f       	mov	r30, r24
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	20 81       	ld	r18, Z
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pin_read+0x24>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <pin_read+0x20>
 128:	82 23       	and	r24, r18
 12a:	fa 01       	movw	r30, r20
 12c:	80 83       	st	Z, r24
	return b_ret_val;
}

bool_t pin_read(port_base base,pin_no pin_no,ecore_u8* r_value)
{
	bool_t b_ret_val = E_TRUE;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
			b_ret_val = E_FALSE; //Unknown pin number
		}
	}
	else
	{
		b_ret_val = E_FALSE; //Unknown port base
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
		{
			*r_value=(*(volatile ecore_u8*)(base)) & (1<<pin_no);
		}
		else
		{
			b_ret_val = E_FALSE; //Unknown pin number
 136:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		b_ret_val = E_FALSE; //Unknown port base
	}
	return b_ret_val;
}
 138:	08 95       	ret

0000013a <pull_up_port>:


bool_t pull_up_port(port_base base)
{
	bool_t b_ret_val = E_TRUE;
	if((base==A)||(base==B)||(base==C)||(base==D))
 13a:	89 33       	cpi	r24, 0x39	; 57
 13c:	31 f0       	breq	.+12     	; 0x14a <pull_up_port+0x10>
 13e:	86 33       	cpi	r24, 0x36	; 54
 140:	21 f0       	breq	.+8      	; 0x14a <pull_up_port+0x10>
 142:	83 33       	cpi	r24, 0x33	; 51
 144:	11 f0       	breq	.+4      	; 0x14a <pull_up_port+0x10>
 146:	80 33       	cpi	r24, 0x30	; 48
 148:	39 f4       	brne	.+14     	; 0x158 <pull_up_port+0x1e>
	{		
		(*(volatile ecore_u8*)(base+OUTPUT_OFFSET)) |= 0xff;
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	82 81       	ldd	r24, Z+2	; 0x02
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	82 83       	std	Z+2, r24	; 0x02
}


bool_t pull_up_port(port_base base)
{
	bool_t b_ret_val = E_TRUE;
 154:	81 e0       	ldi	r24, 0x01	; 1
	if((base==A)||(base==B)||(base==C)||(base==D))
	{		
		(*(volatile ecore_u8*)(base+OUTPUT_OFFSET)) |= 0xff;
 156:	08 95       	ret
	}
	else
	{
		b_ret_val = E_FALSE; //Unknown port base
 158:	80 e0       	ldi	r24, 0x00	; 0
	}
	return b_ret_val;
}
 15a:	08 95       	ret

0000015c <main>:
#include "GPIO.h"
#include <time.h>


int main(void)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <main+0x6>
 162:	00 d0       	rcall	.+0      	; 0x164 <main+0x8>
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
	
	port_direction(A,INPUT);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	89 e3       	ldi	r24, 0x39	; 57
 16e:	0e 94 36 00 	call	0x6c	; 0x6c <port_direction>
	pull_up_port(A);
 172:	89 e3       	ldi	r24, 0x39	; 57
 174:	0e 94 9d 00 	call	0x13a	; 0x13a <pull_up_port>
	port_direction(B,OUTPUT);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	86 e3       	ldi	r24, 0x36	; 54
 17c:	0e 94 36 00 	call	0x6c	; 0x6c <port_direction>
	ecore_u8 v_1=0;
 180:	19 82       	std	Y+1, r1	; 0x01
	ecore_u8 v_2=0;
 182:	1a 82       	std	Y+2, r1	; 0x02
	ecore_u8 v_3=0;
 184:	1b 82       	std	Y+3, r1	; 0x03
	ecore_u8 v_4=0;
 186:	1c 82       	std	Y+4, r1	; 0x04
	ecore_u8 v_5=0;
 188:	1d 82       	std	Y+5, r1	; 0x05
	//pin_direction(A,PIN_7,INPUT);
	//pull_up(A,PIN_7);
   /*  Replace with your application code */
    while (1) 
    {
		pin_read(A,PIN_0,&v_1);
 18a:	ae 01       	movw	r20, r28
 18c:	4f 5f       	subi	r20, 0xFF	; 255
 18e:	5f 4f       	sbci	r21, 0xFF	; 255
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	89 e3       	ldi	r24, 0x39	; 57
 194:	0e 94 80 00 	call	0x100	; 0x100 <pin_read>
		pin_read(A,PIN_1,&v_2);
 198:	ae 01       	movw	r20, r28
 19a:	4e 5f       	subi	r20, 0xFE	; 254
 19c:	5f 4f       	sbci	r21, 0xFF	; 255
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	89 e3       	ldi	r24, 0x39	; 57
 1a2:	0e 94 80 00 	call	0x100	; 0x100 <pin_read>
		pin_read(A,PIN_2,&v_3);
 1a6:	ae 01       	movw	r20, r28
 1a8:	4d 5f       	subi	r20, 0xFD	; 253
 1aa:	5f 4f       	sbci	r21, 0xFF	; 255
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	89 e3       	ldi	r24, 0x39	; 57
 1b0:	0e 94 80 00 	call	0x100	; 0x100 <pin_read>
		pin_read(A,PIN_3,&v_4);
 1b4:	ae 01       	movw	r20, r28
 1b6:	4c 5f       	subi	r20, 0xFC	; 252
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ba:	63 e0       	ldi	r22, 0x03	; 3
 1bc:	89 e3       	ldi	r24, 0x39	; 57
 1be:	0e 94 80 00 	call	0x100	; 0x100 <pin_read>
		pin_read(A,PIN_4,&v_5);
 1c2:	ae 01       	movw	r20, r28
 1c4:	4b 5f       	subi	r20, 0xFB	; 251
 1c6:	5f 4f       	sbci	r21, 0xFF	; 255
 1c8:	64 e0       	ldi	r22, 0x04	; 4
 1ca:	89 e3       	ldi	r24, 0x39	; 57
 1cc:	0e 94 80 00 	call	0x100	; 0x100 <pin_read>
		
		if(v_1==0)
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	81 11       	cpse	r24, r1
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <main+0x86>
		{
			pin_write(B,PIN_0,1);
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	86 e3       	ldi	r24, 0x36	; 54
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <main+0x90>
		}
		else
		{
			pin_write(B,PIN_0,0);
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	86 e3       	ldi	r24, 0x36	; 54
 1e8:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
		}
		if(v_2==0)
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	81 11       	cpse	r24, r1
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <main+0xa2>
		{
			pin_write(B,PIN_1,1);
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	86 e3       	ldi	r24, 0x36	; 54
 1f8:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <main+0xac>
		}
		else
		{
			pin_write(B,PIN_1,0);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	86 e3       	ldi	r24, 0x36	; 54
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
		}
		if(v_3==0)
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	81 11       	cpse	r24, r1
 20c:	06 c0       	rjmp	.+12     	; 0x21a <main+0xbe>
		{
			pin_write(B,PIN_2,1);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	86 e3       	ldi	r24, 0x36	; 54
 214:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
 218:	05 c0       	rjmp	.+10     	; 0x224 <main+0xc8>
		}
		else
		{
			pin_write(B,PIN_2,0);
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	62 e0       	ldi	r22, 0x02	; 2
 21e:	86 e3       	ldi	r24, 0x36	; 54
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
		}
		if(v_4==0)
 224:	8c 81       	ldd	r24, Y+4	; 0x04
 226:	81 11       	cpse	r24, r1
 228:	06 c0       	rjmp	.+12     	; 0x236 <main+0xda>
		{
			pin_write(B,PIN_3,1);
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	63 e0       	ldi	r22, 0x03	; 3
 22e:	86 e3       	ldi	r24, 0x36	; 54
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
 234:	05 c0       	rjmp	.+10     	; 0x240 <main+0xe4>
		}
		else
		{
			pin_write(B,PIN_3,0);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	86 e3       	ldi	r24, 0x36	; 54
 23c:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
		}
		if(v_5==0)
 240:	8d 81       	ldd	r24, Y+5	; 0x05
 242:	81 11       	cpse	r24, r1
 244:	06 c0       	rjmp	.+12     	; 0x252 <main+0xf6>
		{
			pin_write(B,PIN_4,1);
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	64 e0       	ldi	r22, 0x04	; 4
 24a:	86 e3       	ldi	r24, 0x36	; 54
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
 250:	9c cf       	rjmp	.-200    	; 0x18a <main+0x2e>
		}
		else
		{
			pin_write(B,PIN_4,0);
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	64 e0       	ldi	r22, 0x04	; 4
 256:	86 e3       	ldi	r24, 0x36	; 54
 258:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
 25c:	96 cf       	rjmp	.-212    	; 0x18a <main+0x2e>

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
