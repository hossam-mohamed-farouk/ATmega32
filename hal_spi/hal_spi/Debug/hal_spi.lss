
hal_spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b25  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000713  00000000  00000000  00000e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046f  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ac  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000283  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000022c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  74:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_12>:
#include <avr/interrupt.h>

gcfg_hal_spi_t* g_obj_adress;

ISR(SPI_STC_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	bf 93       	push	r27
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
	g_obj_adress->spi_cb_func();
  9e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a2:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a6:	07 80       	ldd	r0, Z+7	; 0x07
  a8:	f0 85       	ldd	r31, Z+8	; 0x08
  aa:	e0 2d       	mov	r30, r0
  ac:	09 95       	icall
}
  ae:	ff 91       	pop	r31
  b0:	ef 91       	pop	r30
  b2:	bf 91       	pop	r27
  b4:	af 91       	pop	r26
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	7f 91       	pop	r23
  bc:	6f 91       	pop	r22
  be:	5f 91       	pop	r21
  c0:	4f 91       	pop	r20
  c2:	3f 91       	pop	r19
  c4:	2f 91       	pop	r18
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <hal_spi_init>:

ecore_s8 hal_spi_init(gcfg_hal_spi_t* obj)
{
  d0:	fc 01       	movw	r30, r24
	ecore_s8 ret_val = E_OK;
	if (obj != NULL)
  d2:	89 2b       	or	r24, r25
  d4:	09 f4       	brne	.+2      	; 0xd8 <hal_spi_init+0x8>
  d6:	48 c0       	rjmp	.+144    	; 0x168 <hal_spi_init+0x98>
	{
		//SPI status
		if (obj->spi_state == SPI_MASTER)
  d8:	80 81       	ld	r24, Z
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	11 f4       	brne	.+4      	; 0xe2 <hal_spi_init+0x12>
		{
			*(volatile ecore_u8*)(0x2D) |= (1<<4);
  de:	6c 9a       	sbi	0x0d, 4	; 13
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <hal_spi_init+0x18>
		} 
		else if (obj->spi_state == SPI_SLAVE)
  e2:	81 11       	cpse	r24, r1
  e4:	0f c0       	rjmp	.+30     	; 0x104 <hal_spi_init+0x34>
		{
			*(volatile ecore_u8*)(0x2D) &= ~(1<<4);
  e6:	6c 98       	cbi	0x0d, 4	; 13
		}
		//PINS config
		if (obj->spi_state == SPI_MASTER)
  e8:	80 81       	ld	r24, Z
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	29 f4       	brne	.+10     	; 0xf8 <hal_spi_init+0x28>
		{
			*(volatile ecore_u8*)(0x37) |= (1<<4) | (1<<5) | (1<<7);  //SS & MOSI & SCK o/p
  ee:	87 b3       	in	r24, 0x17	; 23
  f0:	80 6b       	ori	r24, 0xB0	; 176
  f2:	87 bb       	out	0x17, r24	; 23
			*(volatile ecore_u8*)(0x37) &= ~(1<<6); //MISO i/p
  f4:	be 98       	cbi	0x17, 6	; 23
  f6:	06 c0       	rjmp	.+12     	; 0x104 <hal_spi_init+0x34>
		//	*(volatile ecore_u8*)(0x38) |= (1<<6); //MISO pullup-res
		} 
		else if (obj->spi_state == SPI_SLAVE)
  f8:	81 11       	cpse	r24, r1
  fa:	04 c0       	rjmp	.+8      	; 0x104 <hal_spi_init+0x34>
		{
			*(volatile ecore_u8*)(0x37) |= (1<<6) ;  //MISO o/p
  fc:	be 9a       	sbi	0x17, 6	; 23
			*(volatile ecore_u8*)(0x37) &= ~(1<<4); //SS i/p
  fe:	bc 98       	cbi	0x17, 4	; 23
			*(volatile ecore_u8*)(0x37) &= ~(1<<5); //MOSI i/p
 100:	bd 98       	cbi	0x17, 5	; 23
			*(volatile ecore_u8*)(0x37) &= ~(1<<7); //SCK i/p
 102:	bf 98       	cbi	0x17, 7	; 23
		}
		//Interrupt config  
		if (obj->int_state == SPI_INT_ON)
 104:	81 81       	ldd	r24, Z+1	; 0x01
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	11 f4       	brne	.+4      	; 0x10e <hal_spi_init+0x3e>
		{
			*(volatile ecore_u8*)(0x2D) |= (1<<7);
 10a:	6f 9a       	sbi	0x0d, 7	; 13
 10c:	03 c0       	rjmp	.+6      	; 0x114 <hal_spi_init+0x44>
		} 
		else if (obj->int_state == SPI_INT_OFF)
 10e:	81 11       	cpse	r24, r1
 110:	01 c0       	rjmp	.+2      	; 0x114 <hal_spi_init+0x44>
		{
			*(volatile ecore_u8*)(0x2D) &= ~(1<<7);
 112:	6f 98       	cbi	0x0d, 7	; 13
		}
		//Data order
		if (obj->data_order == SPI_LSB_TRANS_FIRST)
 114:	82 81       	ldd	r24, Z+2	; 0x02
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	11 f4       	brne	.+4      	; 0x11e <hal_spi_init+0x4e>
		{
			*(volatile ecore_u8*)(0x2D) |= (1<<5);
 11a:	6d 9a       	sbi	0x0d, 5	; 13
 11c:	03 c0       	rjmp	.+6      	; 0x124 <hal_spi_init+0x54>
		} 
		else if (obj->data_order == SPI_MSB_TRANS_FIRST)
 11e:	81 11       	cpse	r24, r1
 120:	01 c0       	rjmp	.+2      	; 0x124 <hal_spi_init+0x54>
		{
			*(volatile ecore_u8*)(0x2D) &= ~(1<<5);
 122:	6d 98       	cbi	0x0d, 5	; 13
		}
		//Operating edge config
		if (obj->operating_edge == SPI_TRANS_AT_FALLING)
 124:	83 81       	ldd	r24, Z+3	; 0x03
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	11 f4       	brne	.+4      	; 0x12e <hal_spi_init+0x5e>
		{
			*(volatile ecore_u8*)(0x2D) |= (1<<2);
 12a:	6a 9a       	sbi	0x0d, 2	; 13
 12c:	03 c0       	rjmp	.+6      	; 0x134 <hal_spi_init+0x64>
		} 
		else if (obj->operating_edge == SPI_TRANS_AT_RISING)
 12e:	81 11       	cpse	r24, r1
 130:	01 c0       	rjmp	.+2      	; 0x134 <hal_spi_init+0x64>
		{
			*(volatile ecore_u8*)(0x2D) &= ~(1<<2);
 132:	6a 98       	cbi	0x0d, 2	; 13
		}
		//Sampling edge config (WHEN NO DATA SENDING)
		if (obj->sampling_edge == SPI_HIGH_EDGE)
 134:	84 81       	ldd	r24, Z+4	; 0x04
 136:	81 11       	cpse	r24, r1
 138:	02 c0       	rjmp	.+4      	; 0x13e <hal_spi_init+0x6e>
		{
			*(volatile ecore_u8*)(0x2D) |= (1<<3);
 13a:	6b 9a       	sbi	0x0d, 3	; 13
 13c:	03 c0       	rjmp	.+6      	; 0x144 <hal_spi_init+0x74>
		}
		else if (obj->sampling_edge == SPI_LOW_EDGE)
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	09 f4       	brne	.+2      	; 0x144 <hal_spi_init+0x74>
		{
			*(volatile ecore_u8*)(0x2D) &= ~(1<<3);
 142:	6b 98       	cbi	0x0d, 3	; 13
		}
		//CLK select
		if (obj->spi_state == SPI_MASTER)
 144:	80 81       	ld	r24, Z
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	61 f4       	brne	.+24     	; 0x162 <hal_spi_init+0x92>
		{
			*(volatile ecore_u8*)(0x2D) |= (obj->spi_clock);
 14a:	9d b1       	in	r25, 0x0d	; 13
 14c:	85 81       	ldd	r24, Z+5	; 0x05
 14e:	89 2b       	or	r24, r25
 150:	8d b9       	out	0x0d, r24	; 13
			//Double speed mode
			if (obj->double_speed == SPI_DOUBLE_SPEED_ON)
 152:	86 81       	ldd	r24, Z+6	; 0x06
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	11 f4       	brne	.+4      	; 0x15c <hal_spi_init+0x8c>
			{
				*(volatile ecore_u8*)(0x2E) |= (1<<0);
 158:	70 9a       	sbi	0x0e, 0	; 14
 15a:	03 c0       	rjmp	.+6      	; 0x162 <hal_spi_init+0x92>
			}
			else if (obj->double_speed == SPI_DOUBLE_SPEED_OFF)
 15c:	81 11       	cpse	r24, r1
 15e:	01 c0       	rjmp	.+2      	; 0x162 <hal_spi_init+0x92>
			{
				*(volatile ecore_u8*)(0x2E) &= ~(1<<0);
 160:	70 98       	cbi	0x0e, 0	; 14
			}
		} 
		//Enable SPI
		*(volatile ecore_u8*)(0x2D) |= (1<<6);
 162:	6e 9a       	sbi	0x0d, 6	; 13
	g_obj_adress->spi_cb_func();
}

ecore_s8 hal_spi_init(gcfg_hal_spi_t* obj)
{
	ecore_s8 ret_val = E_OK;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	08 95       	ret
		//Enable SPI
		*(volatile ecore_u8*)(0x2D) |= (1<<6);
	} 
	else
	{
		ret_val = INVALID_ARG;
 168:	8d ec       	ldi	r24, 0xCD	; 205
	}
	return ret_val;
}
 16a:	08 95       	ret

0000016c <hal_spi_trans>:

ecore_s8 hal_spi_trans(ecore_u16 data)
{
	ecore_s8 ret_val = E_OK;
	*(volatile ecore_u8*)(0x2F) = data;
 16c:	8f b9       	out	0x0f, r24	; 15
	while(((*(volatile ecore_u8*)(0x2E)) && (1<<7)) == 0);
 16e:	8e b1       	in	r24, 0x0e	; 14
 170:	88 23       	and	r24, r24
 172:	e9 f3       	breq	.-6      	; 0x16e <hal_spi_trans+0x2>
	return ret_val;
}
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret

00000178 <main>:
#define SET_OUT_DIR(reg,pin_no) reg |= (1<<pin_no)
#define SET_INPUT_DIR(reg,pin_no) reg &= ~(1<<pin_no)
#define TOGGEL_LED(reg,pin_no) reg ^= (1<<pin_no)

int main(void)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	29 97       	sbiw	r28, 0x09	; 9
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
	//ecore_u8 received_data;
	ecore_u8 i=0;
	
	//create SPI object
	gcfg_hal_spi_t my_spi;
	my_spi.spi_state = SPI_MASTER;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	89 83       	std	Y+1, r24	; 0x01
	my_spi.int_state = SPI_INT_OFF;
 190:	1a 82       	std	Y+2, r1	; 0x02
	my_spi.data_order = SPI_MSB_TRANS_FIRST;
 192:	1b 82       	std	Y+3, r1	; 0x03
	my_spi.operating_edge = SPI_TRANS_AT_FALLING; //High
 194:	8c 83       	std	Y+4, r24	; 0x04
	my_spi.sampling_edge = SPI_LOW_EDGE;  //Idle to active
 196:	8d 83       	std	Y+5, r24	; 0x05
	my_spi.spi_clock = CLK_DIV_4; 
 198:	1e 82       	std	Y+6, r1	; 0x06
	my_spi.double_speed = SPI_DOUBLE_SPEED_OFF;
 19a:	1f 82       	std	Y+7, r1	; 0x07
  
  hal_spi_init(&my_spi);
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	0e 94 68 00 	call	0xd0	; 0xd0 <hal_spi_init>
#define SET_OUT_DIR(reg,pin_no) reg |= (1<<pin_no)
#define SET_INPUT_DIR(reg,pin_no) reg &= ~(1<<pin_no)
#define TOGGEL_LED(reg,pin_no) reg ^= (1<<pin_no)

int main(void)
{
 1a4:	00 e0       	ldi	r16, 0x00	; 0
 1a6:	10 e0       	ldi	r17, 0x00	; 0
  
    while (1) 
    {
		for (i=0;i<9;i++)
		{
			hal_spi_trans(i);
 1a8:	c8 01       	movw	r24, r16
 1aa:	0e 94 b6 00 	call	0x16c	; 0x16c <hal_spi_trans>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	2f e3       	ldi	r18, 0x3F	; 63
 1b0:	8d e0       	ldi	r24, 0x0D	; 13
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x3c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x46>
 1be:	00 00       	nop
 1c0:	0f 5f       	subi	r16, 0xFF	; 255
 1c2:	1f 4f       	sbci	r17, 0xFF	; 255
  hal_spi_init(&my_spi);
  
  
    while (1) 
    {
		for (i=0;i<9;i++)
 1c4:	09 30       	cpi	r16, 0x09	; 9
 1c6:	11 05       	cpc	r17, r1
 1c8:	79 f7       	brne	.-34     	; 0x1a8 <main+0x30>
 1ca:	ec cf       	rjmp	.-40     	; 0x1a4 <main+0x2c>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
