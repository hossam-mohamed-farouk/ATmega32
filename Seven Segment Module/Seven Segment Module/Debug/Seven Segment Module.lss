
Seven Segment Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000264  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006a  0080006a  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ba  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069e  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039a  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000480  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c1  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001f8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:




int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	ecore_u8 h_1=0;
  9e:	19 82       	std	Y+1, r1	; 0x01
	ecore_u8 h_2=0;
  a0:	1a 82       	std	Y+2, r1	; 0x02
	ecore_u8 h_3=0;
  a2:	1b 82       	std	Y+3, r1	; 0x03
	ecore_u8 h_4=0;
  a4:	1c 82       	std	Y+4, r1	; 0x04
	ecore_u8 h_5=0;
	ecore_u8 h_6=0;
	
	seven_segment_init(A,COMMON_CATHODE,&h_1);
  a6:	ae 01       	movw	r20, r28
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	89 e3       	ldi	r24, 0x39	; 57
  b0:	0e 94 87 00 	call	0x10e	; 0x10e <seven_segment_init>
	seven_segment_display(h_1,h_1);
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	68 2f       	mov	r22, r24
  b8:	0e 94 bf 00 	call	0x17e	; 0x17e <seven_segment_display>
	
	seven_segment_init(B,COMMON_CATHODE,&h_2);
  bc:	ae 01       	movw	r20, r28
  be:	4e 5f       	subi	r20, 0xFE	; 254
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	86 e3       	ldi	r24, 0x36	; 54
  c6:	0e 94 87 00 	call	0x10e	; 0x10e <seven_segment_init>
	seven_segment_display(h_2,h_2);
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	68 2f       	mov	r22, r24
  ce:	0e 94 bf 00 	call	0x17e	; 0x17e <seven_segment_display>
	
	seven_segment_init(C,COMMON_CATHODE,&h_3);
  d2:	ae 01       	movw	r20, r28
  d4:	4d 5f       	subi	r20, 0xFD	; 253
  d6:	5f 4f       	sbci	r21, 0xFF	; 255
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	83 e3       	ldi	r24, 0x33	; 51
  dc:	0e 94 87 00 	call	0x10e	; 0x10e <seven_segment_init>
	seven_segment_display(h_3,h_3);
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	68 2f       	mov	r22, r24
  e4:	0e 94 bf 00 	call	0x17e	; 0x17e <seven_segment_display>
	
	seven_segment_init(D,COMMON_ANODE,&h_4);
  e8:	ae 01       	movw	r20, r28
  ea:	4c 5f       	subi	r20, 0xFC	; 252
  ec:	5f 4f       	sbci	r21, 0xFF	; 255
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	80 e3       	ldi	r24, 0x30	; 48
  f2:	0e 94 87 00 	call	0x10e	; 0x10e <seven_segment_init>
	seven_segment_display(h_4,h_4);
  f6:	8c 81       	ldd	r24, Y+4	; 0x04
  f8:	68 2f       	mov	r22, r24
  fa:	0e 94 bf 00 	call	0x17e	; 0x17e <seven_segment_display>
	
	seven_segment_deinit(h_3);
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	0e 94 1a 01 	call	0x234	; 0x234 <seven_segment_deinit>

	seven_segment_display(h_3,9);
 104:	69 e0       	ldi	r22, 0x09	; 9
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	0e 94 bf 00 	call	0x17e	; 0x17e <seven_segment_display>
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x7a>

0000010e <seven_segment_init>:

bool_t seven_segment_init(port_base base,seven_segment_type type,ecore_u8* handler)
{
	bool_t b_ret_val = E_TRUE;
	
	if((base < INVALID_MAX_INDEX && base > INVALID_MIN_INDEX) && (handler != NULL))
 10e:	90 ed       	ldi	r25, 0xD0	; 208
 110:	98 0f       	add	r25, r24
 112:	9a 30       	cpi	r25, 0x0A	; 10
 114:	70 f5       	brcc	.+92     	; 0x172 <seven_segment_init+0x64>
 116:	41 15       	cp	r20, r1
 118:	51 05       	cpc	r21, r1
 11a:	69 f1       	breq	.+90     	; 0x176 <seven_segment_init+0x68>
	{
		if (handler_counter < MAX_NO_OF_HANDLERS)
 11c:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <handler_counter>
 120:	94 30       	cpi	r25, 0x04	; 4
 122:	58 f5       	brcc	.+86     	; 0x17a <seven_segment_init+0x6c>
		{
			if ((ga_seven_seg_handlers[handler_counter].seven_seg_base != A) && (ga_seven_seg_handlers[handler_counter].seven_seg_base != B) && (ga_seven_seg_handlers[handler_counter].seven_seg_base != C) && (ga_seven_seg_handlers[handler_counter].seven_seg_base != D))
 124:	a9 2f       	mov	r26, r25
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	fd 01       	movw	r30, r26
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	e6 59       	subi	r30, 0x96	; 150
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	20 81       	ld	r18, Z
 134:	29 33       	cpi	r18, 0x39	; 57
 136:	b1 f0       	breq	.+44     	; 0x164 <seven_segment_init+0x56>
 138:	26 33       	cpi	r18, 0x36	; 54
 13a:	a1 f0       	breq	.+40     	; 0x164 <seven_segment_init+0x56>
 13c:	23 33       	cpi	r18, 0x33	; 51
 13e:	91 f0       	breq	.+36     	; 0x164 <seven_segment_init+0x56>
 140:	20 33       	cpi	r18, 0x30	; 48
 142:	81 f0       	breq	.+32     	; 0x164 <seven_segment_init+0x56>
			//((ga_seven_seg_handlers[handler_counter].seven_seg_type != COMMON_ANODE) || (ga_seven_seg_handlers[handler_counter].seven_seg_type != COMMON_CATHODE))
			{
				(*(volatile ecore_u8*)(base+DIR_OFFSET)) |= 0xff;
 144:	e8 2f       	mov	r30, r24
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	21 81       	ldd	r18, Z+1	; 0x01
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	21 83       	std	Z+1, r18	; 0x01
				ga_seven_seg_handlers[handler_counter].seven_seg_base=base;
 14e:	aa 0f       	add	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	a6 59       	subi	r26, 0x96	; 150
 154:	bf 4f       	sbci	r27, 0xFF	; 255
 156:	8c 93       	st	X, r24
				ga_seven_seg_handlers[handler_counter].seven_seg_type=type;
 158:	11 96       	adiw	r26, 0x01	; 1
 15a:	6c 93       	st	X, r22
				*handler = handler_counter;
 15c:	fa 01       	movw	r30, r20
 15e:	90 83       	st	Z, r25



bool_t seven_segment_init(port_base base,seven_segment_type type,ecore_u8* handler)
{
	bool_t b_ret_val = E_TRUE;
 160:	81 e0       	ldi	r24, 0x01	; 1
			//((ga_seven_seg_handlers[handler_counter].seven_seg_type != COMMON_ANODE) || (ga_seven_seg_handlers[handler_counter].seven_seg_type != COMMON_CATHODE))
			{
				(*(volatile ecore_u8*)(base+DIR_OFFSET)) |= 0xff;
				ga_seven_seg_handlers[handler_counter].seven_seg_base=base;
				ga_seven_seg_handlers[handler_counter].seven_seg_type=type;
				*handler = handler_counter;
 162:	08 95       	ret
			}
			else 
			{
				handler_counter ++;
 164:	9f 5f       	subi	r25, 0xFF	; 255
 166:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <handler_counter>
				seven_segment_init(base,type,handler);
 16a:	0e 94 87 00 	call	0x10e	; 0x10e <seven_segment_init>



bool_t seven_segment_init(port_base base,seven_segment_type type,ecore_u8* handler)
{
	bool_t b_ret_val = E_TRUE;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 95       	ret
			b_ret_val = E_FALSE;
		}
	}	
	else
	{
		b_ret_val = E_FALSE;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret
			}
			
		}
		else
		{
			b_ret_val = E_FALSE;
 17a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		b_ret_val = E_FALSE;
	}
return b_ret_val;
}
 17c:	08 95       	ret

0000017e <seven_segment_display>:

bool_t seven_segment_display(ecore_u8 handler,ecore_u8 data)
{
	bool_t b_ret_val = E_TRUE;
	if((handler < MAX_NO_OF_HANDLERS) && (data <= MAX_NO_TO_DISPLAY))
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	50 f5       	brcc	.+84     	; 0x1d6 <seven_segment_display+0x58>
 182:	6a 30       	cpi	r22, 0x0A	; 10
 184:	50 f5       	brcc	.+84     	; 0x1da <seven_segment_display+0x5c>
	{
		if(ga_seven_seg_handlers[handler].seven_seg_base != 0)
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e6 59       	subi	r30, 0x96	; 150
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	a0 81       	ld	r26, Z
 194:	aa 23       	and	r26, r26
 196:	19 f1       	breq	.+70     	; 0x1de <seven_segment_display+0x60>
		{
			if(ga_seven_seg_handlers[handler].seven_seg_type == COMMON_CATHODE)
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	fc 01       	movw	r30, r24
 19e:	e6 59       	subi	r30, 0x96	; 150
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	81 81       	ldd	r24, Z+1	; 0x01
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	51 f4       	brne	.+20     	; 0x1bc <seven_segment_display+0x3e>
			{
				*(volatile ecore_u8*)(ga_seven_seg_handlers[handler].seven_seg_base+OUTPUT_OFFSET) = common_cathode_pattern[data];
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	e6 2f       	mov	r30, r22
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	e0 5a       	subi	r30, 0xA0	; 160
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	80 81       	ld	r24, Z
 1b4:	12 96       	adiw	r26, 0x02	; 2
 1b6:	8c 93       	st	X, r24
return b_ret_val;
}

bool_t seven_segment_display(ecore_u8 handler,ecore_u8 data)
{
	bool_t b_ret_val = E_TRUE;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	08 95       	ret
			if(ga_seven_seg_handlers[handler].seven_seg_type == COMMON_CATHODE)
			{
				*(volatile ecore_u8*)(ga_seven_seg_handlers[handler].seven_seg_base+OUTPUT_OFFSET) = common_cathode_pattern[data];

			}
			else if(ga_seven_seg_handlers[handler].seven_seg_type == COMMON_ANODE)
 1bc:	81 11       	cpse	r24, r1
 1be:	11 c0       	rjmp	.+34     	; 0x1e2 <seven_segment_display+0x64>
			{
				*(volatile ecore_u8*)(ga_seven_seg_handlers[handler].seven_seg_base+OUTPUT_OFFSET) = ~(common_cathode_pattern[data]);
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e6 2f       	mov	r30, r22
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	e0 5a       	subi	r30, 0xA0	; 160
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	80 95       	com	r24
 1ce:	12 96       	adiw	r26, 0x02	; 2
 1d0:	8c 93       	st	X, r24
return b_ret_val;
}

bool_t seven_segment_display(ecore_u8 handler,ecore_u8 data)
{
	bool_t b_ret_val = E_TRUE;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	08 95       	ret
			b_ret_val = E_FALSE;
		}
	}
	else
	{
		b_ret_val = E_FALSE;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret
				b_ret_val = E_FALSE;
			}
		}
		else
		{
			b_ret_val = E_FALSE;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 95       	ret
				*(volatile ecore_u8*)(ga_seven_seg_handlers[handler].seven_seg_base+OUTPUT_OFFSET) = ~(common_cathode_pattern[data]);

			}
			else
			{
				b_ret_val = E_FALSE;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
	{
		b_ret_val = E_FALSE;
	}

	return b_ret_val;
}
 1e4:	08 95       	ret

000001e6 <seven_segment_reset>:

bool_t seven_segment_reset(ecore_u8 handler)
{
	bool_t b_ret_val = E_TRUE;
		if(handler < MAX_NO_OF_HANDLERS)
 1e6:	84 30       	cpi	r24, 0x04	; 4
 1e8:	f8 f4       	brcc	.+62     	; 0x228 <seven_segment_reset+0x42>
		{
			if(ga_seven_seg_handlers[handler].seven_seg_base != 0)
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	e6 59       	subi	r30, 0x96	; 150
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	20 81       	ld	r18, Z
 1f8:	22 23       	and	r18, r18
 1fa:	c1 f0       	breq	.+48     	; 0x22c <seven_segment_reset+0x46>
			{
				if(ga_seven_seg_handlers[handler].seven_seg_type == COMMON_CATHODE)
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	fc 01       	movw	r30, r24
 202:	e6 59       	subi	r30, 0x96	; 150
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	81 81       	ldd	r24, Z+1	; 0x01
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	31 f4       	brne	.+12     	; 0x218 <seven_segment_reset+0x32>
				{
					*(volatile ecore_u8*)(ga_seven_seg_handlers[handler].seven_seg_base+OUTPUT_OFFSET) = common_cathode_pattern[0];
 20c:	e2 2f       	mov	r30, r18
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	8f e3       	ldi	r24, 0x3F	; 63
 212:	82 83       	std	Z+2, r24	; 0x02
	return b_ret_val;
}

bool_t seven_segment_reset(ecore_u8 handler)
{
	bool_t b_ret_val = E_TRUE;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	08 95       	ret
				if(ga_seven_seg_handlers[handler].seven_seg_type == COMMON_CATHODE)
				{
					*(volatile ecore_u8*)(ga_seven_seg_handlers[handler].seven_seg_base+OUTPUT_OFFSET) = common_cathode_pattern[0];

				}
				else if(ga_seven_seg_handlers[handler].seven_seg_type == COMMON_ANODE)
 218:	81 11       	cpse	r24, r1
 21a:	0a c0       	rjmp	.+20     	; 0x230 <seven_segment_reset+0x4a>
				{
					*(volatile ecore_u8*)(ga_seven_seg_handlers[handler].seven_seg_base+OUTPUT_OFFSET) = ~(common_cathode_pattern[0]);
 21c:	e2 2f       	mov	r30, r18
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 ec       	ldi	r24, 0xC0	; 192
 222:	82 83       	std	Z+2, r24	; 0x02
	return b_ret_val;
}

bool_t seven_segment_reset(ecore_u8 handler)
{
	bool_t b_ret_val = E_TRUE;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	08 95       	ret
				b_ret_val = E_FALSE;
			}
		}
		else
		{
			b_ret_val = E_FALSE;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret
					b_ret_val = E_FALSE;
				}
			}
			else
			{
				b_ret_val = E_FALSE;
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret
					*(volatile ecore_u8*)(ga_seven_seg_handlers[handler].seven_seg_base+OUTPUT_OFFSET) = ~(common_cathode_pattern[0]);

				}
				else
				{
					b_ret_val = E_FALSE;
 230:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			b_ret_val = E_FALSE;
		}
return b_ret_val;
}
 232:	08 95       	ret

00000234 <seven_segment_deinit>:

bool_t seven_segment_deinit(ecore_u8 handler)
{
 234:	cf 93       	push	r28
	bool_t b_ret_val = E_TRUE;
	if (handler < MAX_NO_OF_HANDLERS)
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	80 f4       	brcc	.+32     	; 0x25a <seven_segment_deinit+0x26>
 23a:	c8 2f       	mov	r28, r24
	{
		seven_segment_reset(handler);
 23c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <seven_segment_reset>
		ga_seven_seg_handlers[handler].seven_seg_base = UNKNOWN_BASE;
 240:	ec 2f       	mov	r30, r28
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	e6 59       	subi	r30, 0x96	; 150
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	10 82       	st	Z, r1
		ga_seven_seg_handlers[handler].seven_seg_type = UNKNOWN_TYPE;
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	81 83       	std	Z+1, r24	; 0x01
		handler_counter = handler;	
 252:	c0 93 72 00 	sts	0x0072, r28	; 0x800072 <handler_counter>
return b_ret_val;
}

bool_t seven_segment_deinit(ecore_u8 handler)
{
	bool_t b_ret_val = E_TRUE;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	01 c0       	rjmp	.+2      	; 0x25c <seven_segment_deinit+0x28>
		ga_seven_seg_handlers[handler].seven_seg_type = UNKNOWN_TYPE;
		handler_counter = handler;	
	}
	else
	{
		b_ret_val = E_FALSE;
 25a:	80 e0       	ldi	r24, 0x00	; 0
	}
return b_ret_val;
}
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
